// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import model "github.com/lyquocnam/go-note-learning/model"

// NoteRepo is an autogenerated mock type for the NoteRepo type
type NoteRepo struct {
	mock.Mock
}

// Delete provides a mock function with given fields: id
func (_m *NoteRepo) Delete(id uint) (uint, int, error) {
	ret := _m.Called(id)

	var r0 uint
	if rf, ok := ret.Get(0).(func(uint) uint); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(uint)
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(uint) int); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(uint) error); ok {
		r2 = rf(id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Exist provides a mock function with given fields: id
func (_m *NoteRepo) Exist(id uint) (bool, error) {
	ret := _m.Called(id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(uint) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExistByTitle provides a mock function with given fields: title
func (_m *NoteRepo) ExistByTitle(title string) (bool, error) {
	ret := _m.Called(title)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(title)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(title)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: id
func (_m *NoteRepo) Get(id uint) (*model.Note, error) {
	ret := _m.Called(id)

	var r0 *model.Note
	if rf, ok := ret.Get(0).(func(uint) *model.Note); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Note)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetList provides a mock function with given fields:
func (_m *NoteRepo) GetList() ([]*model.Note, error) {
	ret := _m.Called()

	var r0 []*model.Note
	if rf, ok := ret.Get(0).(func() []*model.Note); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Note)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: note
func (_m *NoteRepo) Insert(note *model.NoteRequest) (*model.Note, int, error) {
	ret := _m.Called(note)

	var r0 *model.Note
	if rf, ok := ret.Get(0).(func(*model.NoteRequest) *model.Note); ok {
		r0 = rf(note)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Note)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(*model.NoteRequest) int); ok {
		r1 = rf(note)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*model.NoteRequest) error); ok {
		r2 = rf(note)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Update provides a mock function with given fields: id, request
func (_m *NoteRepo) Update(id uint, request *model.NoteRequest) (*model.Note, int, error) {
	ret := _m.Called(id, request)

	var r0 *model.Note
	if rf, ok := ret.Get(0).(func(uint, *model.NoteRequest) *model.Note); ok {
		r0 = rf(id, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Note)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(uint, *model.NoteRequest) int); ok {
		r1 = rf(id, request)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(uint, *model.NoteRequest) error); ok {
		r2 = rf(id, request)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
