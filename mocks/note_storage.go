// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import model "github.com/lyquocnam/go-note-learning/model"

// NoteStorage is an autogenerated mock type for the NoteStorage type
type NoteStorage struct {
	mock.Mock
}

// Count provides a mock function with given fields: where, args
func (_m *NoteStorage) Count(where interface{}, args ...interface{}) (int, error) {
	var _ca []interface{}
	_ca = append(_ca, where)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 int
	if rf, ok := ret.Get(0).(func(interface{}, ...interface{}) int); ok {
		r0 = rf(where, args...)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}, ...interface{}) error); ok {
		r1 = rf(where, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: note
func (_m *NoteStorage) Delete(note *model.Note) error {
	ret := _m.Called(note)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Note) error); ok {
		r0 = rf(note)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: id
func (_m *NoteStorage) Get(id uint) (*model.Note, error) {
	ret := _m.Called(id)

	var r0 *model.Note
	if rf, ok := ret.Get(0).(func(uint) *model.Note); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Note)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByTitle provides a mock function with given fields: title
func (_m *NoteStorage) GetByTitle(title string) (*model.Note, error) {
	ret := _m.Called(title)

	var r0 *model.Note
	if rf, ok := ret.Get(0).(func(string) *model.Note); ok {
		r0 = rf(title)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Note)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(title)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetList provides a mock function with given fields:
func (_m *NoteStorage) GetList() ([]*model.Note, error) {
	ret := _m.Called()

	var r0 []*model.Note
	if rf, ok := ret.Get(0).(func() []*model.Note); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Note)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: note
func (_m *NoteStorage) Insert(note *model.Note) (*model.Note, error) {
	ret := _m.Called(note)

	var r0 *model.Note
	if rf, ok := ret.Get(0).(func(*model.Note) *model.Note); ok {
		r0 = rf(note)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Note)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.Note) error); ok {
		r1 = rf(note)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, note
func (_m *NoteStorage) Update(id uint, note *model.Note) (*model.Note, error) {
	ret := _m.Called(id, note)

	var r0 *model.Note
	if rf, ok := ret.Get(0).(func(uint, *model.Note) *model.Note); ok {
		r0 = rf(id, note)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Note)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, *model.Note) error); ok {
		r1 = rf(id, note)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
